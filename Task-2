1.Import Libraries and Load Data
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima.model import ARIMA
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
stock_data = yf.download("TSLA", start="2015-01-01", end="2023-12-31")
stock_data.reset_index(inplace=True)
plt.figure(figsize=(12, 6))
plt.plot(stock_data['Date'], stock_data['Close'], label='Close Price')
plt.title('Tesla Stock Price')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

2.Analyze Trends and Moving Averages
stock_data['MA50'] = stock_data['Close'].rolling(window=50).mean()
stock_data['MA200'] = stock_data['Close'].rolling(window=200).mean()
plt.figure(figsize=(12, 6))
plt.plot(stock_data['Date'], stock_data['Close'], label='Close Price')
plt.plot(stock_data['Date'], stock_data['MA50'], label='50-Day MA', linestyle='--')
plt.plot(stock_data['Date'], stock_data['MA200'], label='200-Day MA', linestyle='--')
plt.title('Tesla Stock Price with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

3. Stationarity Test and ARIMA Model
result = adfuller(stock_data['Close'])
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')
stock_data['Close_diff'] = stock_data['Close'].diff().dropna()
model = ARIMA(stock_data['Close_diff'].dropna(), order=(1, 1, 1))
arima_result = model.fit()
print(arima_result.summary())
forecast = arima_result.forecast(steps=30)
plt.plot(forecast, label='Forecast')
plt.legend()
plt.show()

4. LSTM Model for Prediction
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(stock_data[['Close']])

train_size = int(len(scaled_data) * 0.8)
train_data, test_data = scaled_data[:train_size], scaled_data[train_size:]

def create_sequences(data, sequence_length=60):
    X, y = [], []
    for i in range(len(data) - sequence_length):
        X.append(data[i:i+sequence_length])
        y.append(data[i+sequence_length])
    return np.array(X), np.array(y)

sequence_length = 60
X_train, y_train = create_sequences(train_data, sequence_length)
X_test, y_test = create_sequences(test_data, sequence_length)
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])),
    LSTM(50, return_sequences=False),
    Dense(25),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, batch_size=32, epochs=10)
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
plt.figure(figsize=(12, 6))
plt.plot(stock_data['Date'][train_size + sequence_length:], stock_data['Close'][train_size + sequence_length:], label='Actual Price')
plt.plot(stock_data['Date'][train_size + sequence_length:], predictions, label='Predicted Price')
plt.legend()
plt.show()
